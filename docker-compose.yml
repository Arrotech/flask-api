version: '3.8'

x-database-variables:
  &database-variables
  POSTGRES_DB: flask_api
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres20930988
  PGADMIN_DEFAULT_EMAIL: arrotechdesign@gmail.com
  PGADMIN_DEFAULT_PASSWORD: postgres20930988
  PGADMIN_LISTEN_PORT: 80

x-app-variables:
  &app-variables
  <<: *database-variables
  DB_HOST: db
  STAGE: test
  DATABASE_URI: postgresql+psycopg2://postgres:postgres20930988@db:5432/flask_api
  RABBITMQ_DEFAULT_USER: admin
  RABBITMQ_DEFAULT_PASS: mypass
  FLASK_APP: run

services:
  web:
    build: .
    image: flask_api_web
    command: /start
    depends_on:
      rabbit:
        condition: service_healthy
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    environment: *app-variables
    networks:
      - default
    expose:
      - 5000
    volumes:
      - .:/app
    env_file:
      - ./.env
    restart: always

  db:
    environment: *database-variables
    image: postgres:latest
    networks:
      - default
    ports:
      - 5432:5432
    restart: always
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

  db_migrate:
    image: flask_api_web
    command: python manage.py db upgrade
    volumes:
      - ./migrations:/app
    environment: *app-variables
    depends_on:
      db:
        condition: service_healthy

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4:6.2
    restart: unless-stopped
    environment: *database-variables
    ports:
      - "8080:80"
    volumes:
      # - ./pgadmin-data:/var/lib/pgadmin
      - ./servers.json:/pgadmin4/servers.json
      - ./pgpass:/pgpass
    depends_on:
      db:
        condition: service_healthy

  nginx:
    build: ./nginx
    image: reverse_proxy_nginx
    ports:
      - 1337:80
    depends_on:
      - web
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget -O /dev/null http://localhost || exit 1"
        ]
      interval: 1m30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:6.2-alpine
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 1s
      timeout: 3s
      retries: 30

  rabbit:
    image: rabbitmq:3.9.11-management-alpine
    environment: *app-variables
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", '-q', "ping" ]
      interval: 30s
      timeout: 30s
      retries: 3

  celery_worker:
    build: .
    image: flask_celery_example_celery_worker
    command: /start-celeryworker
    volumes:
      - .:/app
    env_file:
      - ./.env
    environment: *app-variables
    depends_on:
      rabbit:
        condition: service_healthy
      redis:
        condition: service_healthy
      db:
        condition: service_healthy

  celery_beat:
    build: .
    image: flask_celery_example_celery_beat
    command: /start-celerybeat
    volumes:
      - .:/app
    env_file:
      - ./.env
    environment: *app-variables
    depends_on:
      rabbit:
        condition: service_healthy
      redis:
        condition: service_healthy
      db:
        condition: service_healthy

  flower:
    build: .
    image: flask_celery_example_celery_flower
    command: /start-flower
    volumes:
      - .:/app
    env_file:
      - ./.env
    environment: *app-variables
    ports:
      - 5557:5555
    depends_on:
      rabbit:
        condition: service_healthy
      redis:
        condition: service_healthy
      db:
        condition: service_healthy

volumes:
  postgres-data: null
  # pgadmin-data: null
